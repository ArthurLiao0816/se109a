# *Git* Learning
---

## 版本控制系統
* 版本控制の意思：紀錄檔案的變化(eg.結構、內容...等)，之後要用可以用
* 版本控制の種類：
    * 本地端版本控制 Local VCS：
        * 在自己的電腦上用 `Ctrl + C` 跟 `Ctrl + V` 對檔案進行管理
        * *缺點*：不能協同開發
    * 集中化的版本控制系統 CVS：
        * 用一個伺服器統一管理所有版本的檔案，客戶端再從伺服器拿檔案出來用
        * *缺點*：伺服器掛了就完蛋了
    * 分散式版本控制系統 DVCSs：
        * 用戶端在跟伺服器要資料的時候，會把整個倉儲做鏡像
        * *缺點*：保密性差

## *Git* の 特性
* 記錄檔案*快照*，而不是差異
* 沒網路?沒關係，一樣可以做事，有網路再上傳就好
* 用 `checksum` 阻止非正當修改檔案
* 通常都只增加資料(大一用到現在，基本都在 `git push` 傳資料...
* 將檔案分成四種狀態：
    * `committed`：已經上傳惹 ~
    * `modified`：被改了 ~
    * `staged`：等著要被上傳中...
    * `untracked`：新增的檔案 ~

## *Git* の 操作
1. 取得倉儲：
    * 在現有資料夾中初始化倉儲：
        * 進入現成の專案資料夾，執行 `git init`
        * 執行完長醬
        ![execute_git_init](img_src/execute_git_init.png)
        * 如果資料夾裡面原本就有東西，東西會被歸類為 `Untracked`
        ![directory_stuff_untracked](img_src/directory_stuff_untracked.png)
        * 喔嗚!*git*生成一個隱藏資料夾在我的專案裡面ㄟ，趕快偷看(嘿 ~ 嘿 ~
        ![directory_stuff](img_src/directory_stuff.png)
        * 嗯...這蝦毀?不懂。趕緊[逃出來](https://www.youtube.com/watch?v=ro9u_AxB6DY&ab_channel=GlittzyCatDraws)<br>
        ![directory_git](img_src/directory_git.png)
        * 用 `git add -A` 追蹤所有檔案，再用 `git commit -m '0.0'` 提交內容及版本資訊
        ![execute_git_commit](img_src/execute_git_commit.png)
    * clone 現有倉儲：
        * 創建Git倉儲<br>
        ![create_repository](img_src/create_repository.png)
        * 複製倉儲の url
        ![clone_url](img_src/clone_url.png)
        * 執行 `git clone https://github.com/ArthurLiao0816/git_test.git`
        ![execute_git_clone](img_src/execute_git_clone.png)
        * 成功複製 ~<br>
        ![directory_git_clone](img_src/directory_git_clone.png)

2. 檔案 -> Git倉儲：
    * `git add [檔名]`：預存修改過或新增的檔案
    * `git status`：顯示檔案狀態
    * `git status -s`：簡潔的顯示檔案狀態(左邊是預存區のstatus，右邊是工作目錄の)
    * `git commit -a -m ''`：可以直接提交，不用打 `git add -A`
    * `rm [檔名]`：從工作目錄刪除檔案
    * `git rm`：從工作目錄跟預存區中刪除
    * `git rm --cached`：從預存區中刪除
    * `*`：前面要加 `\`

3. 提交の歷史：
    * `git log`：顯示Git倉儲的提交紀錄，最近的在前面
    * `-p`：顯示修改內容
    * `-[數字]`：顯示前\[數字\]項資料
    * `git log --stat`：顯示每筆資料的摘要數據

4. 復原：
    * 若在上次提交後沒有做過任何檔案修改，馬上將遺忘的檔案加入預存區，然後執行 `git commit --amend` ，就可以將移到預存區的檔案跟上次的提交合併
    * `git reset HEAD [檔名]`：將\[檔名\]移出預存區
    * `git checkout -- [檔名]`：將\[檔案\]還原至最初版本

5. 跟遠端協同工作：
    * `git remote`：顯示遠端庫
    * `git branch`：顯示分支
    * `git remote show [遠端名稱]`：顯示特定遠端的資訊
    * `HEAD`：目前的
    * `new`：尚未擁有的遠端分支
    * `stale`：獲取過的分支已經在遠端被移除
    * `git remote rename A B`：將A遠端重新命名為B遠端
    * `git remote rm A`：移除A遠端
    * `git remote add A url`：新增遠端

6. 標籤
    * `git tag`：列出所有標籤
    * `git tag -l <pattern>`：列出符合條件的標籤
    * `git tag -a <tag_name> -m "<tag_discription>"`：建立有註解的標籤
    * `git show <tag_name>`：顯示標籤訊息
    * `git tag <tag_name>`：建立沒註解的標籤
    * `git tag -a <tag_name> <校驗碼>`：對過去的提交貼標籤
    * `git push origin <tag_name>`：分享標籤
    * `git push origin --tags`：把所有沒在倉儲庫的標籤全部傳給伺服器，醬別人在clone或fetch伺服器時，就會拿到你的標籤

7. Git Aliases (超好用!!!)：
    * `git config --global alias.<別名> <原名>`：把某個常用的指令改成短一點的名字，很方便
    * 用 `p` 代替 `push`，`c` 代替 `commit`<br>
    ![execute_git_config-global](img_src/execute_git_config-global.png)<br>
    * 換完之後馬上用<br>
    ![execute_git_config_result](img_src/execute_git_config_result.png)
    * 結果太習慣 `push` 了，忘記換(ㄟ嘿 ~

<<<<<<< HEAD
* 在master分支做修改，改完後commit
=======
## *Git* の 分支
* 一個 `commit` 包含：
    * 指標：代表預存區的東東
    * 作者名稱 & 電子郵件
    * 指向親代提交 の 指標 ( 沒有的話表示這是第一個 `commit` )
* 提交的時候：
    * 對預存區的檔案*內容*進行 `SHA-1` 雜湊計算，然後將檔案存到Git庫中，算出來的雜湊值會被寫入預存區
* `git branch <branch_name>`：新增分支
* `git checkout <branch_name>`：切換分支
* `git log --online --decorate`：查看分支
* `git log --oneline --decorate --graph --all`：查看提交歷史
* `git checkout -b <branch_name>`：新增 & 切換到新分支
* *切換分支前，要先確定預存區是空的*
* `git branch -d <branch_name>`：delete branch

## 試著用用看(分支的部分 ~
* 嗯...建新的倉儲好麻煩...就用上課用的八 ~ 在做之前の資料夾長醬 ~<br>
![ipm_branch_before](img_src/ipm_branch_before.png)
* 分支只有一個 ~<br>
![ipm_origin_branch](img_src/ipm_origin_branch.png)
1. 建個新的分支然後跑過去 ~ 用用看高級的 `git checkout -b nb` 建完之後長醬 ( 有 \* 的是現在所在的分支<br>
![ipm_after_branch](img_src/ipm_after_branch.png)
![](img_src/)
2. 在做上面紀錄的過程我修改了README的內容，現在就在nb分支提交commit八 ~<br>
![](img_src/)
![](img_src/)
>>>>>>> nb
